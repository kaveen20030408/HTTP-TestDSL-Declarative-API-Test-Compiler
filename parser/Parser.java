
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\002\000\002\004\006\000\002\005\007" +
    "\000\002\005\004\000\002\005\002\000\002\021\007\000" +
    "\002\006\004\000\002\006\002\000\002\007\007\000\002" +
    "\010\003\000\002\010\003\000\002\011\004\000\002\011" +
    "\003\000\002\012\007\000\002\013\004\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\006\000\002\015\006\000\002" +
    "\016\005\000\002\016\002\000\002\017\004\000\002\017" +
    "\002\000\002\020\003\000\002\020\006\000\002\022\007" +
    "\000\002\022\010\000\002\022\010\000\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\004\004\007\ufffe\010\ufffe\001\002\000" +
    "\004\023\113\001\002\000\004\002\112\001\002\000\006" +
    "\007\ufff7\010\ufff7\001\002\000\006\007\uffff\010\uffff\001" +
    "\002\000\006\007\012\010\013\001\002\000\006\002\000" +
    "\010\013\001\002\000\004\025\103\001\002\000\004\025" +
    "\016\001\002\000\006\007\ufff8\010\ufff8\001\002\000\006" +
    "\002\ufff2\010\ufff2\001\002\000\004\023\017\001\002\000" +
    "\014\011\030\012\027\013\021\014\025\015\024\001\002" +
    "\000\016\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\024" +
    "\uffee\001\002\000\004\026\100\001\002\000\016\011\030" +
    "\012\027\013\021\014\025\015\024\024\077\001\002\000" +
    "\016\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\024\uffed" +
    "\001\002\000\010\006\060\016\056\017\057\001\002\000" +
    "\004\026\054\001\002\000\016\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\024\uffef\001\002\000\004\026\033\001" +
    "\002\000\004\026\031\001\002\000\004\022\032\001\002" +
    "\000\016\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\024" +
    "\uffec\001\002\000\006\022\uffe7\023\034\001\002\000\010" +
    "\006\uffe5\017\uffe5\024\uffe5\001\002\000\004\022\036\001" +
    "\002\000\016\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\024\uffea\001\002\000\010\006\042\017\040\024\041\001" +
    "\002\000\004\021\051\001\002\000\004\022\uffe8\001\002" +
    "\000\004\026\045\001\002\000\010\006\uffe4\017\uffe4\024" +
    "\uffe4\001\002\000\010\006\uffe6\017\uffe6\024\uffe6\001\002" +
    "\000\004\021\046\001\002\000\004\026\047\001\002\000" +
    "\004\022\050\001\002\000\012\005\ufff9\006\ufff9\017\ufff9" +
    "\024\ufff9\001\002\000\004\026\052\001\002\000\004\022" +
    "\053\001\002\000\010\006\uffe3\017\uffe3\024\uffe3\001\002" +
    "\000\004\022\055\001\002\000\016\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\024\uffeb\001\002\000\004\021\073" +
    "\001\002\000\004\020\070\001\002\000\004\026\061\001" +
    "\002\000\006\020\062\021\063\001\002\000\004\026\066" +
    "\001\002\000\004\026\064\001\002\000\004\022\065\001" +
    "\002\000\016\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\024\uffe1\001\002\000\004\022\067\001\002\000\016\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\024\uffe0\001\002" +
    "\000\004\026\071\001\002\000\004\022\072\001\002\000" +
    "\016\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\024\uffdf" +
    "\001\002\000\004\027\074\001\002\000\004\022\075\001" +
    "\002\000\016\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\024\uffe2\001\002\000\016\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\024\ufff0\001\002\000\006\002\ufff1\010\ufff1" +
    "\001\002\000\006\022\uffe7\023\034\001\002\000\004\022" +
    "\102\001\002\000\016\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\024\uffe9\001\002\000\004\021\104\001\002\000" +
    "\006\026\105\027\107\001\002\000\004\022\ufff5\001\002" +
    "\000\004\022\110\001\002\000\004\022\ufff4\001\002\000" +
    "\006\007\ufff6\010\ufff6\001\002\000\006\002\ufff3\010\ufff3" +
    "\001\002\000\004\002\001\001\002\000\010\005\ufffa\006" +
    "\ufffa\024\ufffa\001\002\000\010\005\116\006\042\024\115" +
    "\001\002\000\006\007\ufffd\010\ufffd\001\002\000\004\021" +
    "\120\001\002\000\010\005\ufffb\006\ufffb\024\ufffb\001\002" +
    "\000\004\026\121\001\002\000\004\022\122\001\002\000" +
    "\010\005\ufffc\006\ufffc\024\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\002\004\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\007\001\001" +
    "\000\002\001\001\000\010\007\013\011\010\012\014\001" +
    "\001\000\004\012\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\021\014\025\015\017\022\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\075\015" +
    "\017\022\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\034\001\001\000\004\017\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\043\021\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\113\001\001" +
    "\000\004\021\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Override syntax error handler
    public void syntax_error(Symbol currentToken) {
        String errorMsg = "Syntax error at line " + currentToken.left + 
                         ", column " + currentToken.right + 
                         ", unexpected token: " + currentToken.value;
        report_error(errorMsg, null);
    }

    // Error reporting mechanism
    public void report_error(String msg, Object data) {
        System.err.println(msg);
    }
    
    // Fatal error handler
    public void unrecovered_syntax_error(Symbol currentToken) {
        String fatalMsg = "Fatal syntax error at line " + currentToken.left + 
                         ", column " + currentToken.right;
        System.err.println(fatalMsg);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= config_section variable_declarations test_suite 
            {
              ProgramNode RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ConfigNode cfg = (ConfigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List vars = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int testsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int testsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List tests = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        ProgramNode node = new ProgramNode();
        if (cfg != null) {
            node.setConfig(cfg);
        }
        for (Object v : vars) {
            node.addVariable((VariableNode) v);
        }
        for (Object t : tests) {
            node.addTest((TestNode) t);
        }
        RESULT = node;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // config_section ::= config_declaration 
            {
              ConfigNode RESULT =null;
		int cfgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConfigNode cfg = (ConfigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cfg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // config_section ::= 
            {
              ConfigNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // config_declaration ::= CONFIG LBRACE config_statements RBRACE 
            {
              ConfigNode RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List stmts = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        ConfigNode node = new ConfigNode();
        for (Object stmt : stmts) {
            if (stmt instanceof String) {
                node.setBaseUrl((String) stmt);
            } else if (stmt instanceof HeaderNode) {
                node.addHeader((HeaderNode) stmt);
            }
        }
        RESULT = node;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // config_statements ::= config_statements BASE_URL EQUALS STRING SEMICOLON 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        list.add(url);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // config_statements ::= config_statements header_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hdrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hdrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HeaderNode hdr = (HeaderNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(hdr);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // config_statements ::= 
            {
              List RESULT =null;
		
        RESULT = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header_statement ::= HEADER STRING EQUALS STRING SEMICOLON 
            {
              HeaderNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new HeaderNode(key, value);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_declarations ::= variable_declarations variable_declaration 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableNode var = (VariableNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(var);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_declarations ::= 
            {
              List RESULT =null;
		
        RESULT = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_declaration ::= LET IDENTIFIER EQUALS literal_value SEMICOLON 
            {
              VariableNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new VariableNode(id, val);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal_value ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal_value ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = num; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // test_suite ::= test_suite test_declaration 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TestNode test = (TestNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(test);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_suite",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // test_suite ::= test_declaration 
            {
              List RESULT =null;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TestNode test = (TestNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(test);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_suite",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // test_declaration ::= TEST IDENTIFIER LBRACE test_body RBRACE 
            {
              TestNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List body = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        TestNode node = new TestNode(id);
        for (Object stmt : body) {
            if (stmt instanceof RequestNode) {
                node.addRequest((RequestNode) stmt);
            } else if (stmt instanceof AssertionNode) {
                node.addAssertion((AssertionNode) stmt);
            }
        }
        RESULT = node;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // test_body ::= test_body statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(stmt);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // test_body ::= statement 
            {
              List RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(stmt);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= http_request 
            {
              Object RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RequestNode req = (RequestNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = req; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= assertion_statement 
            {
              Object RESULT =null;
		int asrtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asrtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssertionNode asrt = (AssertionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = asrt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // http_request ::= GET STRING SEMICOLON 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new RequestNode(RequestNode.HttpMethod.GET, path);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("http_request",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // http_request ::= DELETE STRING SEMICOLON 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new RequestNode(RequestNode.HttpMethod.DELETE, path);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("http_request",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // http_request ::= POST STRING optional_request_block SEMICOLON 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List block = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RequestNode node = new RequestNode(RequestNode.HttpMethod.POST, path);
        for (Object item : block) {
            if (item instanceof HeaderNode) {
                node.addHeader((HeaderNode) item);
            } else if (item instanceof String) {
                node.setBody((String) item);
            }
        }
        RESULT = node;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("http_request",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // http_request ::= PUT STRING optional_request_block SEMICOLON 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List block = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RequestNode node = new RequestNode(RequestNode.HttpMethod.PUT, path);
        for (Object item : block) {
            if (item instanceof HeaderNode) {
                node.addHeader((HeaderNode) item);
            } else if (item instanceof String) {
                node.setBody((String) item);
            }
        }
        RESULT = node;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("http_request",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // optional_request_block ::= LBRACE request_statements RBRACE 
            {
              List RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List stmts = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = stmts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_request_block",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // optional_request_block ::= 
            {
              List RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_request_block",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // request_statements ::= request_statements request_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(stmt);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // request_statements ::= 
            {
              List RESULT =null;
		
        RESULT = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // request_statement ::= header_statement 
            {
              Object RESULT =null;
		int hdrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hdrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HeaderNode hdr = (HeaderNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = hdr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // request_statement ::= BODY EQUALS STRING SEMICOLON 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assertion_statement ::= EXPECT STATUS EQUALS NUMBER SEMICOLON 
            {
              AssertionNode RESULT =null;
		int statusCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statusCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer statusCode = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS, statusCode);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assertion_statement ::= EXPECT HEADER STRING EQUALS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new AssertionNode(AssertionNode.AssertionType.HEADER_EQUALS, key, value);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assertion_statement ::= EXPECT HEADER STRING CONTAINS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new AssertionNode(AssertionNode.AssertionType.HEADER_CONTAINS, key, value);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assertion_statement ::= EXPECT BODY CONTAINS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new AssertionNode(AssertionNode.AssertionType.BODY_CONTAINS, value);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
